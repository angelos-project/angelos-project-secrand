/**
 * Copyright (c) 2025 by Kristoffer Paulsson <kristoffer.paulsson@talenten.se>.
 *
 * This software is available under the terms of the MIT license. Parts are licensed
 * under different terms if stated. The legal terms are attached to the LICENSE file
 * and are made available on:
 *
 *      https://opensource.org/licenses/MIT
 *
 * SPDX-License-Identifier: MIT
 *
 * Contributors:
 *      Kristoffer Paulsson - initial implementation
 */
package org.angproj.sec.rand

import org.angproj.sec.stat.BenchmarkSession
import org.angproj.sec.stat.MonteCarloTester
import org.angproj.sec.stat.SpongeBenchmark
import org.angproj.sec.util.RandomBits
import org.angproj.sec.util.TypeSize
import org.angproj.sec.util.WriteOctet
import org.angproj.sec.util.ceilDiv
import org.angproj.sec.util.incrementWithWrap
import kotlin.math.PI
import kotlin.math.abs
import kotlin.math.min

/**
 * Abstract base class for secure random number generators using a sponge construction.
 *
 * This class provides a framework for generating secure random numbers by leveraging
 * a sponge-based approach. It includes methods for exporting random longs and bytes,
 * reseeding the generator, and performing health checks to ensure the quality of randomness.
 *
 * Subclasses must implement the abstract properties and methods to define specific
 * behaviors for the sponge instance, reseeding conditions, and export conditions.
 *
 * @property sponge The sponge instance used for generating random numbers.
 * @property totalBits Total number of bits generated by the random number generator.
 * @property lastReseedBits Number of bits generated since the last reseed operation.
 */
public abstract class Security {

    /**
     * The sponge instance used for generating random numbers.
     */
    protected abstract val sponge: Sponge

    private var absorbPosition: Int = 0

    private var _totalBits: Long = 0

    private var _lastReseedBits: Long = 0


    /**
     * Total number of bits generated by the random number generator.
     */
    public val totalBits: Long
        get() = _totalBits

    /**
     * Number of bits generated since the last reseed operation.
     */
    public val lastReseedBits: Long
        get() = _lastReseedBits

    /**
     * Retrieves the next specified number of bits from the sponge.
     * If the current position exceeds the visible size, it performs a round and resets the position.
     *
     * @param bits Number of bits to retrieve.
     * @return The next bits as an integer.
     */
    protected fun Sponge.getNextBits(bits: Int): Int {
        if(absorbPosition >= visibleSize) {
            round()
            absorbPosition = 0
        }

        _totalBits = _totalBits.incrementWithWrap(bits)
        _lastReseedBits += bits
        return Randomizer.reduceBits<Unit>(bits, Randomizer.foldBits<Unit>(squeeze(absorbPosition++)))
    }

    protected abstract fun checkReseedConditions(): Boolean

    protected fun reseed() {
        check(checkReseedConditions()) { "Reseed conditions not met" }
        reseedImpl()
        _lastReseedBits = 0
    }

    protected abstract fun reseedImpl()

    protected abstract fun checkExportConditions(length: Int): Boolean

    /**
     * Reads random longs into a LongArray from the secure random source.
     * This function fills the LongArray with random numbers starting from a specified offset.
     * The data is read in chunks, and the sponge state is updated accordingly.
     *
     * @param data The LongArray to fill with random numbers.
     */
    public fun <E> readLongs(data: E, offset: Int, length: Int, writeOctet: WriteOctet<E, Long>) {
        if(length <= 0) return

        check(checkExportConditions(length)) { "Export conditions not met" }
        repeat(length) { index ->
            data.writeOctet(offset + index, RandomBits.nextBitsToLong { sponge.getNextBits(it) })
        }
    }

    /**
     * Reads bytes into a data structure from the secure random source.
     * This function fills the data structure with random bytes
     * starting from a specified offset and for a specified length.
     *
     * The data structure must provide a way to write bytes at specific indices
     * and the function will write bytes in little-endian order.
     * This is useful for filling buffers, arrays, or any other
     * data structure that can hold bytes.
     *
     * @param data The data structure to fill with random bytes.
     * @param offset The starting index in the data structure to write to.
     * @param length The number of bytes to read. Defaults to 0, meaning the entire data structure.
     * @param writeOctet A function that writes a byte at a specific index in the data structure.
     */
    public fun <E> readBytes(data: E, offset: Int, length: Int, writeOctet: WriteOctet<E, Byte>) {
        if(length <= 0) return

        check(checkExportConditions(length)) { "Export conditions not met" }
        var pos = 0
        repeat(length.ceilDiv(TypeSize.intSize)) {
            val bytes = min(TypeSize.intSize, length - pos)
            var entropy = sponge.getNextBits(bytes * TypeSize.byteBits)
            repeat(bytes) {
                data.writeOctet(offset + pos++, entropy.toByte())
                entropy = entropy ushr TypeSize.byteBits
            }
        }
    }

    /**
     * Performs a health check on the given sponge instance using statistical tests.
     * Returns true if the sponge passes the health check, false otherwise.
     *
     * @param sponge The sponge instance to be tested.
     * @return True if the sponge passes the health check, false otherwise.
     */
    protected fun healthCheck(sponge: Sponge): Boolean {
        val objectSponge = SpongeBenchmark(sponge)
        val samplesNeeded = MonteCarloTester.Mode.MODE_64_BIT.size * 10_000_000L / objectSponge.sampleByteSize

        val session = BenchmarkSession(samplesNeeded, objectSponge.sampleByteSize, objectSponge)
        val monteCarlo = session.registerTester { MonteCarloTester(10_000_000, MonteCarloTester.Mode.MODE_64_BIT, it) }

        session.startRun()
        repeat(samplesNeeded.toInt()) {
            session.collectSample()
        }
        session.stopRun()
        val results = session.finalizeCollecting()

        println(results[monteCarlo]!!.report)
        if(abs(PI - results[monteCarlo]!!.keyValue) > 0.01) return false
        return true
    }

    /**
     * Performs a security health check on the current sponge instance.
     * Throws an exception if the health check fails.
     */
    public fun securityHealthCheck() {
        check(healthCheck(sponge)) { "Security health check failed!" }
    }
}